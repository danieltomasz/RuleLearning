source('~/gibbs2.r')
source('~/gibbs2.r')
debugSource('~/gibbs2.r')
debugSource('~/gibbs2.r')
debugSource('~/gibbs2.r')
debugSource('~/gibbs2.r')
debugSource('~/gibbs2.r')
debugSource('~/gibbs2.r')
debugSource('~/gibbs2.r')
debugSource('~/gibbs2.r')
debugSource('~/gibbs2.r')
debugSource('~/gibbs2.r')
debugSource('~/gibbs2.r')
source('~/gibbs2.r')
source('~/gibbs2.r')
source('~/gibbs2.r')
source('~/gibbs2.r')
source('~/gibbs.r')
source('~/gibbs.r')
ll_rule
source('~/gibbs.r')
source('~/gibbs.r')
source('~/gibbs.r')
source('~/.active-rstudio-document')
source('~/gibbs.r')
noise_vals
lenght(noise_vals)
length(noise_vals)
source('~/gibbs.r')
matrix(noise_vals,c(length(noise_vals),sum(cc==m)))
ll_rule_string[[m]] <- matrix(noise_vals,c(length(noise_vals),sum(cc==m)))
ll_rule_string[[m]]
source('~/gibbs.r')
a
source('~/gibbs.r')
dim(ll_rule_string[[m]] )
a
source('~/gibbs.r')
cc==m
source('~/gibbs.r')
ll_rule_string[[m]]
r
poss_rules[r]
poss_rules
a
length(this_train
)
train[cc==m]
sum(cc=m)
dim(ll_rule_string[[m]])
cc=m
source('~/gibbs.r')
cc==m
sum(cc==m)
matrix
?matrix
ll_rule_string[[m]] <- matrix(noise_vals,length(noise_vals),sum(cc==m))
dim(ll_rule_string[[m]])
source('~/gibbs.r')
noise_vals
vec <- c(1,1)
vec <- c(1,1,3)
t(replicate(10, vec))
t(replicate(vec,10 ))
replicate(10, vec)
replicate(sum(cc==m), noise_vlas)
replicate(sum(cc==m), noise_vals)
noise_vals
t(replicate(10, noise_vals))
replicate(10, noise_vals)
replicate(10, noise_vals)
replicate(sum(cc==m), noise_vals)
sum(cc==m)
cc
m
source('~/.active-rstudio-document')
a
poss_rules[r]
poss_rules
poss_rules <-which(hs[["true"]][,index_cache[["train"]][cache_inds[a]]]==TRUE)
poss_rules
source('~/gibbs.r')
source('~/RuleLearning/Rcode/main.R')
source('~/gibbs.r')
source('~/.active-rstudio-document')
j
cc
c2
source('~/RuleLearning/Rcode/main.R')
source('~/RuleLearning/Rcode/main.R')
source('~/RuleLearning/Rcode/main.R')
image(t(c3),col=rainbow(12))
source('~/RuleLearning/Rcode/main.R')
source('~/gibbs.r')
View(`c3`)
cc
sum(cc==m)
max(cc)
c
c2[[k]][j]
k
cc
debugSource('~/RuleLearning/Rcode/compLik.r')
source('~/RuleLearning/Rcode/main.R')
source('~/RuleLearning/Rcode/main.R')
source('~/RuleLearning/Rcode/main.R')
source('~/RuleLearning/Rcode/main.R')
source('~/RuleLearning/Rcode/main.R')
?colSums
source('~/RuleLearning/Rcode/main.R')
source('~/Pulpit/RuleLearning/Rcode/main.R')
debugSource('~/Pulpit/RuleLearning/Rcode/compLik.r')
load(file = "mymodel.rda")
c=c2[1]
c=c2[[1]]
c
c=1:12
#save(hs, train, c2,index_cache,file = "mymodel.rda")
#load(file = "mymodel.rda")
library("matrixStats")
N_s = length(hs[["all_strings"]])
N_r = length(hs[["hs"]])
# wiarogodnosc p(d|h)
#stałe
log_alpha = log(alpha)
log_notalpha = log(1-alpha)
noise_vals = rep(log_notalpha + log(1/(N_s)),N_r )
c=1:12
alpha= .9
#save(hs, train, ,index_cache,file = "mymodel.rda")
#load(file = "mymodel.rda")
library("matrixStats")
N_s = length(hs[["all_strings"]])
N_r = length(hs[["hs"]])
# wiarogodnosc p(d|h)
#stałe
log_alpha = log(alpha)
log_notalpha = log(1-alpha)
noise_vals = rep(log_notalpha + log(1/(N_s)),N_r )
ll_rule_string<- vector(mode="list", length=(max(c)))
ll_rule<- vector(mode="list", length=(max(c)))
ll_cluster<- vector(length=(max(c)))
k=1
this_train <- train[c==k]
cache_inds <- which(c==k)
# wypelnij wiarogodnosc danych jesli wykreowane dzieki szumowi przez halas
#ll_rule_string[[k]] <- matrix(noise_vals,c(1,sum(c==k)))
ll_rule_string[[k]] <- matrix(replicate(sum(c==k), noise_vals))
dim( ll_rule_string[[k]])
poss_rules <-which(hs[["true"]][,index_cache[["train"]][cache_inds[i]]]==TRUE)
i=1
poss_rules <-which(hs[["true"]][,index_cache[["train"]][cache_inds[i]]]==TRUE)
poss_rules
ll_rule_string[[k]][poss_rules[r],i]
r=2
ll_rule_string[[k]][poss_rules[r],i]
for (i in 1:length(this_train)){
poss_rules <-which(hs[["true"]][,index_cache[["train"]][cache_inds[i]]]==TRUE)
for (r in 1:length(poss_rules)){
ll_rule_string[[k]][poss_rules[r],i] <- logSumExp(c(log_alpha + hs[["log_probs"]][poss_rules[r]], log_notalpha + log(hs[["card"]][poss_rules[r]]/N_s) + hs[["log_probs"]][poss_rules[r]]))
}
}
ll_rule[[k]] = colSums(ll_rule_string[[k]],1) + log(1/N_r)
ll_rule[[k]]
ll_rule_string[[k]]
ll_cluster[[k]] = logSumExp(c(ll_rule[[k]][!is.infinite(ll_rule[[k]])]))
debugSource('~/Pulpit/RuleLearning/Rcode/compLik.r')
source('~/Pulpit/RuleLearning/Rcode/main.R')
ll_rule_string[[k]]
k =2
this_train <- train[c==k]
cache_inds <- which(c==k)
this_train
cache_inds
ll_rule_string[[k]] <- matrix(replicate(sum(c==k), noise_vals))
for (i in 1:length(this_train)){
poss_rules <-which(hs[["true"]][,index_cache[["train"]][cache_inds[i]]]==TRUE)
for (r in 1:length(poss_rules)){
ll_rule_string[[k]][poss_rules[r],i] <- logSumExp(c(log_alpha + hs[["log_probs"]][poss_rules[r]], log_notalpha + log(hs[["card"]][poss_rules[r]]/N_s) + hs[["log_probs"]][poss_rules[r]]))
}
}
ll_rule[[k]] = colSums(ll_rule_string[[k]]) + log(1/N_r)
ll_rule[[k]]
ll_rule[[k]] = colSums(ll_rule_string[[k]]) + log(1/N_r)
ll_cluster[[k]] = logSumExp(c(ll_rule[[k]][!is.infinite(ll_rule[[k]])]))
source('~/Pulpit/RuleLearning/Rcode/main.R')
source('~/Pulpit/RuleLearning/Rcode/main.R')
k =3
k
source('~/Pulpit/RuleLearning/Rcode/main.R')
source('~/Pulpit/RuleLearning/Rcode/main.R')
cc
c
for (k  in  1:max(c)){
this_train <- train[c==k]
cache_inds <- which(c==k)
# wypelnij wiarogodnosc danych jesli wykreowane dzieki szumowi przez halas
#ll_rule_string[[k]] <- matrix(noise_vals,c(1,sum(c==k)))
ll_rule_string[[k]] <- matrix(replicate(sum(c==k), noise_vals))
# compute likelihood of the data under each other possible rule
for (i in 1:length(this_train)){
poss_rules <-which(hs[["true"]][,index_cache[["train"]][cache_inds[i]]]==TRUE)
for (r in 1:length(poss_rules)){
ll_rule_string[[k]][poss_rules[r],i] <- logSumExp(c(log_alpha + hs[["log_probs"]][poss_rules[r]], log_notalpha + log(hs[["card"]][poss_rules[r]]/N_s) + hs[["log_probs"]][poss_rules[r]]))
}
}
for (k  in  1:max(c)){
this_train <- train[c==k]
cache_inds <- which(c==k)
# wypelnij wiarogodnosc danych jesli wykreowane dzieki szumowi przez halas
#ll_rule_string[[k]] <- matrix(noise_vals,c(1,sum(c==k)))
ll_rule_string[[k]] <- matrix(replicate(sum(c==k), noise_vals))
# compute likelihood of the data under each other possible rule
for (i in 1:length(this_train)){
poss_rules <-which(hs[["true"]][,index_cache[["train"]][cache_inds[i]]]==TRUE)
for (r in 1:length(poss_rules)){
ll_rule_string[[k]][poss_rules[r],i] <- logSumExp(c(log_alpha + hs[["log_probs"]][poss_rules[r]], log_notalpha + log(hs[["card"]][poss_rules[r]]/N_s) + hs[["log_probs"]][poss_rules[r]]))
}
}
for (k  in  1:max(c)){
this_train <- train[c==k]
cache_inds <- which(c==k)
# wypelnij wiarogodnosc danych jesli wykreowane dzieki szumowi przez halas
#ll_rule_string[[k]] <- matrix(noise_vals,c(1,sum(c==k)))
ll_rule_string[[k]] <- matrix(replicate(sum(c==k), noise_vals))
# compute likelihood of the data under each other possible rule
for (i in 1:length(this_train)){
poss_rules <-which(hs[["true"]][,index_cache[["train"]][cache_inds[i]]]==TRUE)
for (r in 1:length(poss_rules)){
ll_rule_string[[k]][poss_rules[r],i] <- logSumExp(c(log_alpha + hs[["log_probs"]][poss_rules[r]], log_notalpha + log(hs[["card"]][poss_rules[r]]/N_s) + hs[["log_probs"]][poss_rules[r]]))
}
}
}
}
}
for (k  in  1:max(c)){
this_train <- train[c==k]
cache_inds <- which(c==k)
# wypelnij wiarogodnosc danych jesli wykreowane dzieki szumowi przez halas
#ll_rule_string[[k]] <- matrix(noise_vals,c(1,sum(c==k)))
ll_rule_string[[k]] <- matrix(replicate(sum(c==k), noise_vals))
# compute likelihood of the data under each other possible rule
for (i in 1:length(this_train)){
poss_rules <-which(hs[["true"]][,index_cache[["train"]][cache_inds[i]]]==TRUE)
for (r in 1:length(poss_rules)){
ll_rule_string[[k]][poss_rules[r],i] <- logSumExp(c(log_alpha + hs[["log_probs"]][poss_rules[r]], log_notalpha + log(hs[["card"]][poss_rules[r]]/N_s) + hs[["log_probs"]][poss_rules[r]]))
}
}
# now product over rules
ll_rule[[k]] = colSums(ll_rule_string[[k]]) + log(1/N_r)
#now sum for that cluster over all those that aren't -Inf
ll_cluster[[k]] = logSumExp(c(ll_rule[[k]][!is.infinite(ll_rule[[k]])]))
}
source('~/Pulpit/RuleLearning/Rcode/main.R')
colSums
olSums(ll_rule_string[[k]],1)
colSums(ll_rule_string[[k]],1)
source('~/Pulpit/RuleLearning/Rcode/main.R')
pwd
getwd()
dirname(sys.frame(1)$ofile)
source('~/Pulpit/RuleLearning/Rcode/main.R')
dir
source("functions/functions.R")
source('~/.active-rstudio-document')
source('~/Pulpit/RuleLearning/Rcode/main.R')
source('~/Pulpit/RuleLearning/Rcode/main.R')
source('~/Pulpit/RuleLearning/Rcode/main.R')
source('~/Pulpit/RuleLearning/Rcode/main.R')
source('~/Pulpit/RuleLearning/Rcode/main.R')
source('~/Pulpit/RuleLearning/Rcode/main.R')
source('~/Pulpit/RuleLearning/main.R')
source('~/Pulpit/RuleLearning/main.R')
source('~/Pulpit/RuleLearning/main.R')
source('~/Pulpit/RuleLearning/code/compLik.r')
source('~/Pulpit/RuleLearning/main.R')
source('~/Pulpit/RuleLearning/main.R')
debugSource('~/Pulpit/RuleLearning/main.R')
debugSource('~/Pulpit/RuleLearning/main.R')
debugSource('~/Pulpit/RuleLearning/main.R')
script.dir <- dirname(sys.frame(1)$ofile)
debugSource('~/Pulpit/RuleLearning/main.R')
:ll_rule_string[[k]][poss_rules[r],i]
ll_rule_string[[k]][poss_rules[r],i]
ll_rule[[k]]
ll_rule
rowSums(ll_rule_string[[k]],1) + log(1/N_r)
ll_cluster[[k]] = logSumExp(c(ll_rule[[k]][!is.infinite(ll_rule[[k]])]))
ll_cluster[[k]]
noise_vals
log_notalpha
1/(N_s
)
log(1/(N_s)
)
N_s
alpha
log(1-alpha)
sum(ll_cluster)
ll_cluster[[k]]
logSumExp(ll_rule[[k]][!is.infinite(ll_rule[[k]])])
ll_rule[[k]]
source('~/.active-rstudio-document')
debugSource('~/Pulpit/RuleLearning/main.R')
debugSource('~/Pulpit/RuleLearning/main.R')
debugSource('~/Pulpit/RuleLearning/main.R')
debugSource('~/Pulpit/RuleLearning/main.R')
sum(c==k)
matrix(0,1,length(noise_vals)
)
matrix(0,length(noise_vals),1)
noise_vals
owSums(ll_rule_string[[k]],1)
rowSums(ll_rule_string[[k]],1)
rowSums(matrix(0,length(noise_vals),1))
debugSource('~/Pulpit/RuleLearning/main.R')
debugSource('~/Pulpit/RuleLearning/main.R')
debugSource('~/Pulpit/RuleLearning/main.R')
debugSource('~/Pulpit/RuleLearning/main.R')
ll_rule_string[[k]]
ll_rule_string[[k]]
debugSource('~/Pulpit/RuleLearning/main.R')
source('~/Pulpit/RuleLearning/main.R')
debugSource('~/Pulpit/RuleLearning/main.R')
debugSource('~/Pulpit/RuleLearning/main.R')
debugSource('~/Pulpit/RuleLearning/main.R')
c
c[1]=2
c
k =1
this_train <- train[c==k]
length(this_train)
!length(this_train)
matrix(replicate(1,0*noise_vals))
alpha=0.9
N_s = length(hs[["all_strings"]])
N_r = length(hs[["hs"]])
# wiarogodnosc p(d|h)
#stałe
log_alpha = log(alpha)
log_notalpha = log(1-alpha)
noise_vals = rep(log_notalpha + log(1/(N_s)),N_r )
# wiarogodnosc dla kazdego clustra
ll_rule_string<- vector(mode="list", length=(max(c)))
ll_rule<- vector(mode="list", length=(max(c)))
ll_cluster<- vector(length=(max(c)))
matrix(replicate(1,0*noise_vals))
ll_rule_string[[k]] <-matrix(replicate(1,0*noise_vals))
ll_rule_string[[k]] <-matrix(replicate(1,0*noise_vals))
ll_rule[[k]] = rowSums(ll_rule_string[[k]],1) + log(1/N_r)
ll_rule[[k]]
ll_cluster[[k]] = logSumExp(ll_rule[[k]][!is.infinite(ll_rule[[k]])])
ll_cluster[[k]]
debugSource('~/Pulpit/RuleLearning/main.R')
length(this_train)
debugSource('~/Pulpit/RuleLearning/main.R')
ll_rule_string[[k]]
sum(c==k)
replicate(sum(c==k), noise_vals)
matrix(replicate(sum(c==k), noise_vals))
source('~/Pulpit/RuleLearning/main.R')
source('~/Pulpit/RuleLearning/main.R')
source('~/Pulpit/RuleLearning/main.R')
source('~/Pulpit/RuleLearning/main.R')
source('~/Pulpit/RuleLearning/main.R')
source('~/Pulpit/RuleLearning/main.R')
source('~/Pulpit/RuleLearning/main.R')
source('~/Pulpit/RuleLearning/main.R')
source('~/Pulpit/RuleLearning/ML.r')
source('~/Pulpit/RuleLearning/ML.r')
source('~/Pulpit/RuleLearning/code/compLik.r')
source('~/.active-rstudio-document')
ll
toString(ll, width = 8)
toString(ll, width = 3)
toString(ll[1], width = )
toString(ll[1], width = 4)
toString(ll[1], width = 6)
as.character(ll[1])
? round
as.character(round(ll[1],2))
source('~/Pulpit/RuleLearning/disp.r')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/Pulpit/RuleLearning/disp.r')
source('~/Pulpit/RuleLearning/disp.r')
source('~/Pulpit/RuleLearning/disp.r')
source('~/Pulpit/RuleLearning/main.R')
source('~/Pulpit/RuleLearning/main.R')
source('~/Pulpit/RuleLearning/main.R')
hs["card"]
N_S
N_s = length(hs[["all_strings"]])
N_s - hs["card"]
hs["card"] + N_s
dim(hs["card"])
N_s -  hs[["card"]]
source('~/Pulpit/RuleLearning/main.R')
source('~/Pulpit/RuleLearning/main.R')
N_s -  hs[["card"]]
log(1/N_s -  hs[["card"]])
log(1/N_s -  hs[["card"]])
log(1/(N_s -  hs[["card"]))
(N_s -  hs[["card"])
(N_s -  hs[["card"]])
source('~/Pulpit/RuleLearning/main.R')
debugSource('~/Pulpit/RuleLearning/main.R')
source('~/Pulpit/RuleLearning/main.R')
source('~/Pulpit/RuleLearning/main.R')
source('~/Pulpit/RuleLearning/main.R')
source('~/Pulpit/RuleLearning/main.R')
source('~/Pulpit/RuleLearning/main.R')
source('~/Pulpit/RuleLearning/main.R')
debugSource('~/Pulpit/RuleLearning/main.R')
(N_s -  hs[["card"]])mlhs
debugSource('~/Pulpit/RuleLearning/main.R')
}
u
mlhs<-u[[2]][[1]]
mlhs
u[[2]][1]
u
debugSource('~/Pulpit/RuleLearning/main.R')
return(wynik)
u
u[[2]]
length(u[[2]])
source('~/Pulpit/RuleLearning/main.R')
source('~/Pulpit/RuleLearning/main.R')
source('~/Pulpit/RuleLearning/main.R')
debugSource('~/Pulpit/RuleLearning/main.R')
mlhs[[i]][[1]]
mlhs[i][[1]]
mlhs[[i]][[1]]
mlhs[[i]][[2]]
mlhs
mlhs[[i]][[1]][1]
mlhs[[i]][[1]][2]
source('~/Pulpit/RuleLearning/main.R')
source('~/Pulpit/RuleLearning/main.R')
source('~/Pulpit/RuleLearning/main.R')
source('~/Pulpit/RuleLearning/main.R')
source('~/Pulpit/RuleLearning/main.R')
source('~/Pulpit/RuleLearning/main.R')
